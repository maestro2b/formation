using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Xml.Serialization;


//Générer une classe à partir d'une XSD: xsd your.xsd /classes

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            var res = new Result
            {
                Id = 1,
                Category = new List<string>() { "cat1", "cat2" },
                Version = DateTime.Now
            };

            //Object to XML doc
            var xmlData = GetXMLFromObject(res);
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(xmlData);

            string xmlToJsonData = JsonConvert.SerializeXmlNode(xmlDoc);


            var jsonToXmlDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(xmlToJsonData);

            var XmlDocToStringXml = ConvertXmlDocumentToString(jsonToXmlDoc);

            var xmlToOBject = XMLToObject(XmlDocToStringXml, typeof(Result));

            Console.WriteLine(xmlData);
            Console.ReadKey();
        }
        public static string GetXMLFromObject(object o)
        {
            StringWriter sw = new StringWriter();
            XmlTextWriter tw = null;
            try
            {
                XmlSerializer serializer = new XmlSerializer(o.GetType());
                tw = new XmlTextWriter(sw);
                serializer.Serialize(tw, o);
            }
            catch (Exception ex)
            {
                //Handle Exception Code
            }
            finally
            {
                sw.Close();
                if (tw != null)
                {
                    tw.Close();
                }
            }
            return sw.ToString();
        }

        public static Object XMLToObject(string xml, Type objectType)
        {
            StringReader strReader = null;
            XmlSerializer serializer = null;
            XmlTextReader xmlReader = null;
            Object obj = null;
            try
            {
                strReader = new StringReader(xml);
                serializer = new XmlSerializer(objectType);
                xmlReader = new XmlTextReader(strReader);
                obj = serializer.Deserialize(xmlReader);
            }
            catch (Exception exp)
            {
                //Handle Exception Code
            }
            finally
            {
                if (xmlReader != null)
                {
                    xmlReader.Close();
                }
                if (strReader != null)
                {
                    strReader.Close();
                }
            }
            return obj;
        }

        public static string ConvertXmlDocumentToString(XmlDocument xmlDoc)
        {
            using (var stringWriter = new StringWriter())
            using (var xmlTextWriter = XmlWriter.Create(stringWriter))
            {
                xmlDoc.WriteTo(xmlTextWriter);
                xmlTextWriter.Flush();
                return stringWriter.GetStringBuilder().ToString();
            }
        }
    }


    public class Result
    {
        public int Id { get; set; }
        public List<string> Category { get; set; }
        public DateTime Version { get; set; }
    }

    
}
